install.packages("shiny")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='satvikshukla', token='2DB7CABA28A7FDD309720F79A68BD3B1', secret='PMu8ZOWaNlQPRAEZ/8tva75+32R63zykOiJw2kz9')
shiny::runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
library(shiny)
library(plotly)
shinyUI(fluidPage(
titlePanel("Art and R"),
sidebarLayout(
sidebarPanel(
selectInput(
"col.spa", "Color space", choices = list("RGB" = "rgb", "HSV" = "hsv", "LAB" = "lab", "LCH" = "lch", "LUV" = "luv"), selected = 1
)#,
#selectInput(
#	"col.val", "Color characteristic", choices = list(substr(col.spa, 1, 1), substr(col.spa, 2, 2), substr(col.spa, 3, 3)), selected = 1
#)
),
mainPanel(
plotlyOutput("distPlot")
)
)
))
runApp('E:/google-drive/personal-project/art-and-R')
shiny::runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
shiny::runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
?updateSelectInput
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
View(art.data)
shiny::runApp('E:/google-drive/personal-project/art-and-R')
shiny::runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
install.packages("profvis")
library(profvis)
data("unemployment")
hcmap("counties/all", data = unemployment, value = "value", joinBy = c("hc-key", "code"))
library(highcharter)
hcmap("counties/all", data = unemployment, value = "value", joinBy = c("hc-key", "code"))
hcmap("counties/us/us-all-all", data = unemployment, value = "value", joinBy = c("hc-key", "code"))
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("RColorBrewer")
library(htmlwidgets)
library(htmlwidgets)
library(highcharter)
library(RColorBrewer)
library(readr)
library(dplyr)
nations <- read_csv("nations.csv") %>%
mutate(gdp_tn = gdp_percap*population/1000000000000)
big4 <- nations %>%
filter(iso3c == "CHN" | iso3c == "DEU" | iso3c == "JPN" | iso3c == "USA") %>%
arrange(year)
setwd("E:/New folder")
library(htmlwidgets)
library(htmlwidgets)
library(highcharter)
library(RColorBrewer)
library(readr)
library(dplyr)
nations <- read_csv("nations.csv") %>%
mutate(gdp_tn = gdp_percap*population/1000000000000)
big4 <- nations %>%
filter(iso3c == "CHN" | iso3c == "DEU" | iso3c == "JPN" | iso3c == "USA") %>%
arrange(year)
View(big4)
library(htmlwidgets)
library(htmlwidgets)
library(highcharter)
library(RColorBrewer)
library(readr)
library(dplyr)
nations <- read_csv("nations.csv") %>%
mutate(gdp_tn = gdp_percap*population/1000000000000)
big4 <- nations %>%
filter(iso3c == "CHN" | iso3c == "DEU" | iso3c == "JPN" | iso3c == "USA") %>%
arrange(year)
highchart() %>%
hc_add_series_df(data = big4,
type = "line",
x = year,
y = gdp_tn,
group = country)
library(htmlwidgets)
library(htmlwidgets)
library(highcharter)
library(RColorBrewer)
library(readr)
library(dplyr)
nations <- read_csv("nations.csv") %>%
mutate(gdp_tn = gdp_percap*population/1000000000000)
big4 <- nations %>%
filter(iso3c == "CHN" | iso3c == "DEU" | iso3c == "JPN" | iso3c == "USA") %>%
arrange(year)
big4_chart <- highchart() %>%
hc_add_series_df(data = big4,
type = "line",
x = year,
y = gdp_tn,
group = country) %>%
hc_colors(cols) %>%
hc_xAxis(title = list(text="Year")) %>%
hc_yAxis(title = list(text="GDP ($ trillion)")) %>%
hc_chart(style = list(fontFamily = "Georgia",
fontWeight = "bold")) %>%
hc_plotOptions(series = list(marker = list(symbol = "circle"))) %>%
hc_legend(align = "right",
verticalAlign = "top") %>%
hc_tooltip(shared = TRUE,
borderColor = "black",
pointFormat = "{point.country}: {point.gdp_tn:.2f}<br>")
library(htmlwidgets)
library(htmlwidgets)
library(highcharter)
library(RColorBrewer)
library(readr)
library(dplyr)
nations <- read_csv("nations.csv") %>%
mutate(gdp_tn = gdp_percap*population/1000000000000)
big4 <- nations %>%
filter(iso3c == "CHN" | iso3c == "DEU" | iso3c == "JPN" | iso3c == "USA") %>%
arrange(year)
big4_chart <- highchart() %>%
hc_add_series_df(data = big4,
type = "line",
x = year,
y = gdp_tn,
group = country) %>%
hc_xAxis(title = list(text="Year")) %>%
hc_yAxis(title = list(text="GDP ($ trillion)")) %>%
hc_chart(style = list(fontFamily = "Georgia",
fontWeight = "bold")) %>%
hc_plotOptions(series = list(marker = list(symbol = "circle"))) %>%
hc_legend(align = "right",
verticalAlign = "top") %>%
hc_tooltip(shared = TRUE,
borderColor = "black",
pointFormat = "{point.country}: {point.gdp_tn:.2f}<br>")
library(htmlwidgets)
library(htmlwidgets)
library(highcharter)
library(RColorBrewer)
library(readr)
library(dplyr)
nations <- read_csv("nations.csv") %>%
mutate(gdp_tn = gdp_percap*population/1000000000000)
big4 <- nations %>%
filter(iso3c == "CHN" | iso3c == "DEU" | iso3c == "JPN" | iso3c == "USA") %>%
arrange(year)
big4_chart <- highchart() %>%
hc_add_series(data = big4,
type = "line",
x = year,
y = gdp_tn,
group = country) %>%
hc_xAxis(title = list(text="Year")) %>%
hc_yAxis(title = list(text="GDP ($ trillion)")) %>%
hc_chart(style = list(fontFamily = "Georgia",
fontWeight = "bold")) %>%
hc_plotOptions(series = list(marker = list(symbol = "circle"))) %>%
hc_legend(align = "right",
verticalAlign = "top") %>%
hc_tooltip(shared = TRUE,
borderColor = "black",
pointFormat = "{point.country}: {point.gdp_tn:.2f}<br>")
FormatData <- function(data) {
data.format <- data[c(1:225),c(1:80)]
col.names.temp <- vector()
for (i in colnames(data.format)) {
if (!(grepl('Footnotes', i) | grepl('Type', i)))
col.names.temp <- c(col.names.temp, i)
}
data.format <- select(data.format, col.names.temp)
data.format <- data.format[,-c(3:5)]
return(data.format)
}
TransposeData <- function(data) {
data.transpose <- t(data)
colnames(data.transpose) <- data.transpose['Country',]
data.transpose <- data.transpose[-c(1:2),]
data.transpose <- data.frame(data.transpose)
data.transpose <- cbind(year = c(1990:2014), data.transpose)
rownames(data.transpose) <- c(1:25)
for (i in colnames(data.transpose)) {
data.transpose[[i]] <- as.numeric(as.character(data.transpose[[i]]))
}
return(data.transpose)
}
CalculateAvgChange <- function(data.transpose) {
avg.change <- vector()
for (i in colnames(data.transpose)[2:ncol(data.transpose)]) {
# If country <2 non-NA values then they will have an NA average change
if (all(is.na(data.transpose[[i]]))) {
change <- NA
} else {
change <- coef(lm(data.transpose[[i]] ~ year, data = data.transpose, na.action = 'na.exclude'))[[2]]
}
avg.change <- c(avg.change, change)
}
# 40 countries have NA for average rate of change
return(avg.change)
}
RemoveNA <- function(input.data) {
output.data <- input.data[!(is.na(input.data$avg.change) | input.data$avg.change==""), ]
return(output.data)
}
library(shiny)
library(dplyr)
library(plotly)
library(tidyr)
source('education_completed_data_wrangling.R')
# Reading in the data and formatting it to be more accessible
both.sex <- FormatData(read.csv('../data/DisplayByIndicator.csv', stringsAsFactors = FALSE))
# Transposing the data
both.sex.transpose <- TransposeData(both.sex)
avg.change <- CalculateAvgChange(both.sex.transpose)
both.sex$avg.change <- avg.change
both.sex.no.na <- RemoveNA(both.sex)
# Arranged for most positive/negative change to be the top-most value
both.sex.neg.change <- both.sex %>%
filter(avg.change < 0) %>%
arrange(avg.change)
both.sex.pos.change <- both.sex %>%
filter(avg.change >= 0) %>%
arrange(desc(avg.change))
setwd("E:/google-drive/study/info-201/assignments/INFO201/scripts")
library(shiny)
library(dplyr)
library(plotly)
library(tidyr)
source('education_completed_data_wrangling.R')
# Reading in the data and formatting it to be more accessible
both.sex <- FormatData(read.csv('../data/DisplayByIndicator.csv', stringsAsFactors = FALSE))
# Transposing the data
both.sex.transpose <- TransposeData(both.sex)
avg.change <- CalculateAvgChange(both.sex.transpose)
both.sex$avg.change <- avg.change
both.sex.no.na <- RemoveNA(both.sex)
# Arranged for most positive/negative change to be the top-most value
both.sex.neg.change <- both.sex %>%
filter(avg.change < 0) %>%
arrange(avg.change)
both.sex.pos.change <- both.sex %>%
filter(avg.change >= 0) %>%
arrange(desc(avg.change))
View(both.sex.no.na)
data("AirPassengers")
View(AirPassengers)
