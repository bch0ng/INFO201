install.packages("shiny")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='satvikshukla', token='2DB7CABA28A7FDD309720F79A68BD3B1', secret='PMu8ZOWaNlQPRAEZ/8tva75+32R63zykOiJw2kz9')
shiny::runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
library(shiny)
library(plotly)
shinyUI(fluidPage(
titlePanel("Art and R"),
sidebarLayout(
sidebarPanel(
selectInput(
"col.spa", "Color space", choices = list("RGB" = "rgb", "HSV" = "hsv", "LAB" = "lab", "LCH" = "lch", "LUV" = "luv"), selected = 1
)#,
#selectInput(
#	"col.val", "Color characteristic", choices = list(substr(col.spa, 1, 1), substr(col.spa, 2, 2), substr(col.spa, 3, 3)), selected = 1
#)
),
mainPanel(
plotlyOutput("distPlot")
)
)
))
runApp('E:/google-drive/personal-project/art-and-R')
shiny::runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
shiny::runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
?updateSelectInput
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
runApp('E:/google-drive/personal-project/art-and-R')
View(art.data)
shiny::runApp('E:/google-drive/personal-project/art-and-R')
setwd("E:/google-drive/study/info-201/assignments/INFO201/scripts")
FormatData <- function(data) {
data.format <- data[c(1:225),c(1:80)]
col.names.temp <- vector()
for (i in colnames(data.format)) {
if (!(grepl('Footnotes', i) | grepl('Type', i)))
col.names.temp <- c(col.names.temp, i)
}
data.format <- select(data.format, col.names.temp)
data.format <- data.format[,-c(3:5)]
return(data.format)
}
TransposeData <- function(data) {
data.transpose <- t(data)
colnames(data.transpose) <- data.transpose['Country',]
data.transpose <- data.transpose[-c(1:2),]
data.transpose <- data.frame(data.transpose)
data.transpose <- cbind(year = c(1990:2014), data.transpose)
rownames(data.transpose) <- c(1:25)
for (i in colnames(data.transpose)) {
data.transpose[[i]] <- as.numeric(as.character(data.transpose[[i]]))
}
return(data.transpose)
}
CalculateAvgChange <- function(data.transpose) {
avg.change <- vector()
for (i in colnames(data.transpose)[2:ncol(data.transpose)]) {
# If country <2 non-NA values then they will have an NA average change
if (all(is.na(data.transpose[[i]]))) {
change <- NA
} else {
change <- coef(lm(data.transpose[[i]] ~ year, data = data.transpose, na.action = 'na.exclude'))[[2]]
}
avg.change <- c(avg.change, change)
}
# 40 countries have NA for average rate of change
return(avg.change)
}
RemoveNA <- function(input.data) {
output.data <- input.data[!(is.na(input.data$avg.change) | input.data$avg.change==""), ]
colnames(output.data) <- c("country.code", "country.name", c(1990:2014), "avg.change")
return(output.data)
}
library(shiny)
library(dplyr)
library(plotly)
library(tidyr)
source('education_completed_data_wrangling.R')
# Reading in the data and formatting it to be more accessible
both.sex <- FormatData(read.csv('../data/DisplayByIndicator.csv', stringsAsFactors = FALSE))
# Transposing the data
both.sex.transpose <- TransposeData(both.sex)
avg.change <- CalculateAvgChange(both.sex.transpose)
both.sex$avg.change <- avg.change
both.sex.no.na <- RemoveNA(both.sex)
# Arranged for most positive/negative change to be the top-most value
both.sex.neg.change <- both.sex %>%
filter(avg.change < 0) %>%
arrange(avg.change)
both.sex.pos.change <- both.sex %>%
filter(avg.change >= 0) %>%
arrange(desc(avg.change))
View(both.sex.no.na)
both.sex.no.na[[2000]]
both.sex.no.na[["2000"]]
runApp('E:/google-drive/personal-project/art-and-R')
df <- read.csv("abc.csv", stringsAsFactors = FALSE)
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~avg.change, color = ~avg.change, colors = 'Blues',
text = ~country.name, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
View(df)
View(both.sex.no.na)
write.csv(both.sex.no.na, "abc.csv")
write.csv(both.sex.no.na, "abc.csv", row.names = FALSE)
df <- read.csv("abc.csv", stringsAsFactors = FALSE)
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~avg.change, color = ~avg.change, colors = 'Blues',
text = ~country.name, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
p
p
df <- read.csv("abc.csv", stringsAsFactors = FALSE)
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~avg.change, color = ~avg.change, colors = 'Blues',
text = ~country.name, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
p
df <- read.csv("abc.csv", stringsAsFactors = FALSE)
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~avg.change, color = ~avg.change, colors = 'Blues',
text = ~country.name, locations = ~country.code, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = 'meh',
geo = g
)
p
?plot_geo
?add_trace
df <- read.csv("abc.csv", stringsAsFactors = FALSE)
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~avg.change, color = ~avg.change, colors = 'Blues',
text = ~country.name, locations = ~country.code, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = 'meh',
geo = g
)
p
Sys.setenv("plotly_username"="satvikshukla")
Sys.setenv("plotly_api_key"="pk.eyJ1Ijoic2F0dmlrc2h1a2xhIiwiYSI6ImNqYXJhY2Q0ejE5MWoyd3BmZXlobW5vbWkifQ.gSRFmGv4xBCsUbgmmXQpjQ")
p
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
p
Sys.setenv("plotly_api_key"="DdcHohLJZMCK2pxLBv7y")
p
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
p
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
p
Sys.setenv("plotly_username"="satvikshukla")
Sys.setenv("plotly_username"="satvikshukla")
Sys.setenv("plotly_api_key"="1F69pRQFuSiqKoMytBte")
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
p
